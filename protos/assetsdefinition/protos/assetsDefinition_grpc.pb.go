// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AssetCheckClient is the client API for AssetCheck service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssetCheckClient interface {
	CheckForAssetAvailability(ctx context.Context, in *GetAssetAvailabilityRequest, opts ...grpc.CallOption) (*AssetAvailabilityResponse, error)
}

type assetCheckClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetCheckClient(cc grpc.ClientConnInterface) AssetCheckClient {
	return &assetCheckClient{cc}
}

func (c *assetCheckClient) CheckForAssetAvailability(ctx context.Context, in *GetAssetAvailabilityRequest, opts ...grpc.CallOption) (*AssetAvailabilityResponse, error) {
	out := new(AssetAvailabilityResponse)
	err := c.cc.Invoke(ctx, "/AssetCheck/CheckForAssetAvailability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssetCheckServer is the server API for AssetCheck service.
// All implementations must embed UnimplementedAssetCheckServer
// for forward compatibility
type AssetCheckServer interface {
	CheckForAssetAvailability(context.Context, *GetAssetAvailabilityRequest) (*AssetAvailabilityResponse, error)
	//mustEmbedUnimplementedAssetCheckServer()
}

// UnimplementedAssetCheckServer must be embedded to have forward compatible implementations.
type UnimplementedAssetCheckServer struct {
}

func (UnimplementedAssetCheckServer) CheckForAssetAvailability(context.Context, *GetAssetAvailabilityRequest) (*AssetAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckForAssetAvailability not implemented")
}
//func (UnimplementedAssetCheckServer) mustEmbedUnimplementedAssetCheckServer() {}

// UnsafeAssetCheckServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetCheckServer will
// result in compilation errors.
//type UnsafeAssetCheckServer interface {
//	mustEmbedUnimplementedAssetCheckServer()
//}

func RegisterAssetCheckServer(s grpc.ServiceRegistrar, srv AssetCheckServer) {
	s.RegisterService(&AssetCheck_ServiceDesc, srv)
}

func _AssetCheck_CheckForAssetAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetCheckServer).CheckForAssetAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AssetCheck/CheckForAssetAvailability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetCheckServer).CheckForAssetAvailability(ctx, req.(*GetAssetAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AssetCheck_ServiceDesc is the grpc.ServiceDesc for AssetCheck service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssetCheck_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AssetCheck",
	HandlerType: (*AssetCheckServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckForAssetAvailability",
			Handler:    _AssetCheck_CheckForAssetAvailability_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/assetsDefinition.proto",
}
